function cropFaceFromImage(e,t,a,o,i,c){const n=t.getContext("2d");n.clearRect(0,0,t.width,t.height),n.drawImage(e,a,o,i,c,0,0,t.width,t.height),t.style.opacity=1}async function loadModels(){const e="/models";await Promise.all([faceapi.nets.ssdMobilenetv1.loadFromUri(e),faceapi.nets.faceLandmark68Net.loadFromUri(e),faceapi.nets.faceRecognitionNet.loadFromUri(e)]).catch((e=>{throw new Error("Model loading failed")}))}async function crop(e){const t=e.querySelector("img"),a=e.querySelector("canvas");if(!t||!a)return;t.height=a.height,t.width=a.width;const o=await faceapi.detectAllFaces(t).withFaceLandmarks();if(!o.length)return;const{alignedRect:i,detection:c}=o[0],{x:n,y:r,width:d,height:h}=i.box,{width:l,height:s}=c.imageDims,m=Math.min(l,2*d),f=Math.min(s,2*h),g=Math.max(0,n-m/4),w=Math.max(0,r-f/3);requestAnimationFrame((()=>{cropFaceFromImage(t,a,g,w,m,f)}))}async function autocrop(){window.onload=async()=>{await loadModels(),document.querySelectorAll(".profile-photo").forEach((async e=>{await crop(e)}))}}export default autocrop;